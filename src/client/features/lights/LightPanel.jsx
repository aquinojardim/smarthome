import React from "react";
import * as actions from "../../reducer/actions/actions";
import { useSelector, useDispatch } from "react-redux";
import { makeStyles } from "@material-ui/core/styles";
import { Button, Drawer, List, Divider } from "@material-ui/core";
import PowerSettingsNewIcon from "@material-ui/icons/PowerSettingsNew";
import PowerOffIcon from "@material-ui/icons/PowerOff";
import LightItem from "./lightsComponents/LightItem";
import LightForm from "./lightsComponents/LightForm";

// custom styles for the drawer
const useStyles = makeStyles((theme) => ({
  // drawer stays at fixed width, no matter the size of the screen
  drawer: {
    [theme.breakpoints.down("sm")]: {
      width: "80%",
      height: "80%",
      margin: "10%",
    },
    [theme.breakpoints.up("md")]: {
      width: "90%",
      height: "80%",
      margin: "5%",
    },
    flexShrink: 0,
  },
  button: {
    width: "50%",
  },
  title: {
    marginLeft: "18px",
    marginTop: "52px",
  },
  // width of background of drawer
  drawerPaper: {
    backgroundColor: "#333",
    [theme.breakpoints.up("xs")]: {
      width: "80%",
      height: "70%",
      margin: "10%",
      marginTop: "20%",
    },
    [theme.breakpoints.up("sm")]: {
      width: "80%",
      height: "80%",
      margin: "10%",
    },
    [theme.breakpoints.up("md")]: {
      width: "90%",
      height: "80%",
      margin: "5%",
    },
  },
  drawerContainer: {
    overflow: "auto",
  },
}));

export default function LightPanel() {
  // gives us access to styles object generated by makeStyles
  const classes = useStyles();
  const dispatch = useDispatch();
  const { lights } = useSelector((state) => state);
  const lightsArray = Object.values(lights);

  /* Drawer is our sidebar navigation component, stays permanently fixed to side, as docs recommend on desktop usage */
  return (
    <Drawer
      // targets the nested component of the drawer (in this case, the paper)
      classes={{
        paper: classes.drawerPaper,
      }}
      className={classes.drawer}
      variant="permanent"
      anchor="right"
    >
      <h3 className={classes.title}> Lights Panel </h3>
      <div className={classes.drawerContainer}>
        {/* map topics to new navbar items (rendered as a list) */}
        <Button
          // eslint-disable-next-line no-unused-vars
          onClick={(e) => {
            dispatch(actions.allLights(true));
          }}
          color="secondary"
          className={classes.button}
          startIcon={<PowerSettingsNewIcon />}
        >
          All On
        </Button>
        <Button
          // eslint-disable-next-line no-unused-vars
          onClick={(e) => {
            dispatch(actions.allLights(false));
          }}
          color="default"
          className={classes.button}
          startIcon={<PowerOffIcon />}
        >
          All Off
        </Button>
        <List>
          {/* up and down implent logic comparing with Date.now()*/}
          {/* <LightItem id={1} name={'test'} status={true}/> */}
          {lightsArray.map((obj, index) => {
            return (
              <LightItem
                key={index + 1}
                id={index + 1}
                name={obj.name}
                status={obj.status}
              />
            );
          })}
          <Divider />
          {/* form to arr a new light */}
          <LightForm />
        </List>
      </div>
    </Drawer>
  );
}
